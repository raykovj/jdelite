define("modules/flow/flowUtils",["modules/diagram/diagramUtils","modules/view/dndUtils","modules/graph/graphConstants","modules/settings/config"],function(e,n,t,r){var a=function(e,n){for(var t=0;t<n.length;t++)if(n[t].hasPointInside(e))return n[t]},u=function(e,n){for(var t=0;t<n.length;t++)if(n[t].hasPointInside(e))return t;return-1};return{getMinLevelNumber:function(){return r.hasStartEndLevels()?1:0},getMinLevel:function(e){return e.getLevels()[r.hasStartEndLevels()?1:0]},getMaxLevelNumber:function(e){var n=e.getLevels().length;return r.hasStartEndLevels()?n-2:n-1},getTotalMaxLevelNumber:function(e){return e.getLevels().length-1},getMaxLevel:function(e){var n=e.getLevels(),t=e.getLevels().length;return n[r.hasStartEndLevels()?t-2:t-1]},getMinLaneNumber:function(){return r.hasSideSwimLanes()?1:0},getMinLane:function(e){return e.getLanes()[r.hasSideSwimLanes()?1:0]},getMaxLaneNumber:function(e){var n=e.getLanes().length;return r.hasSideSwimLanes()?n-2:n-1},getTotalMaxLaneNumber:function(e){return e.getLanes().length-1},getMaxLane:function(e){var n=e.getLanes(),t=e.getLanes().length;return n[r.hasSideSwimLanes()?t-2:t-1]},getContentLevelsNumber:function(e){for(var n=0,t=(Number.MAX_VALUE,e.nodes),r=0;r<t.length;r++)n=Math.max(n,t[r].levelNum);return n},getContentLanesNumber:function(e){for(var n=0,t=e.nodes,r=0;r<t.length;r++)n=Math.max(n,t[r].laneNum);return n+1},getCanvasLevelsNumber:function(e){for(var n=e.nodes,a=Number.MAX_VALUE,u=0,i=0;i<n.length;i++){var o=n[i];o.type!==t.flowId().START&&o.type!==t.flowId().END&&(a=Math.min(o.levelNum,a),u=Math.max(o.levelNum,u))}return a=a<Number.MAX_VALUE?a:0,u-a+r.hasStartEndLevels()?0:1},getTotalCanvasLevels:function(e){for(var n=e.nodes,a=0,u=0;u<n.length;u++){var i=n[u];i.type!==t.flowId().START&&i.type!==t.flowId().END&&(a=Math.max(i.levelNum,a))}return a+=r.hasStartEndLevels()?0:1},getCanvasLanesNumber:function(e){for(var n=e.nodes,a=Number.MAX_VALUE,u=0,i=0;i<n.length;i++){var o=n[i];o.type!==t.flowId().LEFT_TOP&&o.type!==t.flowId().RIGHT_BOTTOM&&(a=Math.min(o.laneNum,a),u=Math.max(o.laneNum,u))}return a=a<Number.MAX_VALUE?a:0,u-a+r.hasSideSwimLanes()?0:1},getTotalCanvasLanes:function(e){for(var n=e.nodes,a=0,u=0;u<n.length;u++){var i=n[u];i.type!==t.flowId().LEFT_TOP&&i.type!==t.flowId().RIGHT_BOTTOM&&(a=Math.max(i.laneNum,a))}return a+=r.hasSideSwimLanes()?0:1},decrementStringValue:function(e){var n=parseInt(e);return(--n).toString()},incrementStringValue:function(e){var n=parseInt(e);return(++n).toString()},getRectangleAtPoint:function(e,n){return a(e,n)},getLevelAtPoint:function(e,n){return a(e,n)},getLevelIndexAtPoint:function(e,n){return u(e,n)},getLevelPipeAtPoint:function(e,n){return a(e,n)},getLevelPipeIndexAtPoint:function(e,n){return u(e,n)},getLaneAtPoint:function(e,n){return a(e,n)},getLaneIndexAtPoint:function(e,n){return u(e,n)},getLanePipeAtPoint:function(e,n){return a(e,n)},getLanePipeIndexAtPoint:function(e,n){return u(e,n)}}});