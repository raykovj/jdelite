define("modules/layout/edgesLayout",["modules/geometry/point","modules/graph/xPoint","modules/graph/cell","modules/graph/graphNode","modules/graph/connector","modules/layout/edgesLayoutUtils","modules/graph/corridor","modules/graph/pipe","modules/graph/pipeCrossing","modules/graph/segment","modules/graph/graphConstants","modules/settings/config"],function(e,t,n,g,i,d,a,l,o,P,s,p){function r(n){function g(g,i,l){g.getName();var r=g.getSourcePort().getNode(),L=r.getLevelNumber(),m=r.getLaneNumber(),S=g.getSourcePort().getSide(),E=g.getTargetPort().getNode(),T=E.getLevelNumber(),c=E.getLaneNumber(),w=g.getTargetPort().getSide(),y=p.getFlowDirection();if(i.getPipe().equals(l.getPipe())){var u;i.getPipe().getType()===s.pipeType().LEVEL_PIPE?(u=new P(g,i.getPipe(),null,s.segmentType().IN_PIPE,i,l),g.addSegment(u),i.getPipe().addSegment(u)):i.getPipe().getType()===s.pipeType().LANE_PIPE&&(u=new P(g,i.getPipe(),null,s.segmentType().IN_PIPE,i,l),g.addSegment(u),i.getPipe().addSegment(u))}else{var I,v,C,A,N,R,f,h,_,O,x,F,V,B,M,D,k;if(i.getPipe().getType()===l.getPipe().getType()){if(i.getPipe().getType()===s.pipeType().LEVEL_PIPE){if(I=!1,S!=w&&T-L>1&&!g.isDummyOptimization()&&!g.hasPipesOnly())if(d.isLevelRangeEmptyForLane(a.getLevels(),c,L+1,T-1,n.getBlockedCells()))v=d.getPipeXSideCenter(a.getLevelPipes()[L+1],l,y),C=new t(v,a.getLevelPipes()[L+1]),A=new P(g,i.getPipe(),null,s.segmentType().IN_PIPE,i,C),g.addSegmentAt(1,A),a.getLevelPipes()[L+1].addSegment(A),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),null,s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLanes()[r.getLaneNumber()].addExtendedSegment(h),I=!0;else if(d.isLevelRangeEmptyForLane(a.getLevels(),m,L+1,T-1,n.getBlockedCells())){v=d.getPipeXSideCenter(a.getLevelPipes()[T],i,y),C=new t(v,a.getLevelPipes()[T]),N=new t(g.getSourcePort().getAttachmentPoint(),i.getPipe()),f=new P(g,i.getPipe(),null,s.segmentType().NODE_TO_PIPE,N,C),g.replaceStartSegment(f),a.getLanes()[r.getLaneNumber()].addExtendedSegment(f);var b=new P(g,l.getPipe(),null,s.segmentType().IN_PIPE,C,l);g.addSegment(b),a.getLevelPipes()[T].addSegment(b),I=!0}if(!I){var H;if(c>m)H=a.getLanePipes()[c];else if(c<m)H=a.getLanePipes()[c+1];else{var G=a.getLanePipes()[m].getSegmentsNumber(),X=a.getLanePipes()[m+1].getSegmentsNumber();H=G<=X?a.getLanePipes()[c]:a.getLanePipes()[c+1]}_=new o(i.getPipe(),H),x=new t(_.getCenterPoint(),i.getPipe()),O=new o(l.getPipe(),H),F=new t(O.getCenterPoint(),l.getPipe()),V=new P(g,i.getPipe(),null,s.segmentType().IN_PIPE,i,x),g.addSegment(V),i.getPipe().addSegment(V),B=new P(g,H,null,s.segmentType().IN_PIPE,x,F),g.addSegment(B),H.addSegment(B),M=new P(g,l.getPipe(),null,s.segmentType().IN_PIPE,F,l),g.addSegment(M),l.getPipe().addSegment(M)}}else if(i.getPipe().getType()===s.pipeType().LANE_PIPE&&(I=!1,g.isDummyOptimization()||g.hasPipesOnly()||(y===s.flow().VERTICAL&&m<c&&d.isSourceMatchingSide(g,s.nodeSide().LEFT)&&d.isTargetMatchingSide(g,s.nodeSide().RIGHT)?d.isLaneRangeEmptyForLevel(a.getLanes(),T,m+1,c-1,n.getBlockedCells())&&d.isLaneRangeEmptyForLevel(a.getLanes(),L,m+1,c-1,n.getBlockedCells())&&(v=d.getPipeXSideCenter(a.getLanePipes()[m+1],l,y),C=new t(v,a.getLanePipes()[m+1]),A=new P(g,i.getPipe(),null,s.segmentType().IN_PIPE,i,C),g.addSegmentAt(1,A),a.getLanePipes()[m+1].addSegment(A),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),null,s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLevels()[E.getLevelNumber()].addExtendedSegment(h),I=!0):y===s.flow().HORIZONTAL&&m<c&&d.isSourceMatchingSide(g,s.nodeSide().RIGHT)&&d.isTargetMatchingSide(g,s.nodeSide().LEFT)?d.isLaneRangeEmptyForLevel(a.getLanes(),L,m+1,c-1,n.getBlockedCells())&&d.isLaneRangeEmptyForLevel(a.getLanes(),T,m+1,c-1,n.getBlockedCells())&&(v=d.getPipeXSideCenter(a.getLanePipes()[m+1],l,y),C=new t(v,a.getLanePipes()[c]),A=new P(g,i.getPipe(),null,s.segmentType().IN_PIPE,i,C),g.addSegmentAt(1,A),a.getLanePipes()[m+1].addSegment(A),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),null,s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLevels()[E.getLevelNumber()].addExtendedSegment(h),I=!0):y===s.flow().VERTICAL&&m>c&&d.isSourceMatchingSide(g,s.nodeSide().RIGHT)&&d.isTargetMatchingSide(g,s.nodeSide().LEFT)?d.isLaneRangeEmptyForLevel(a.getLanes(),T,c+1,m-1,n.getBlockedCells())&&d.isLaneRangeEmptyForLevel(a.getLanes(),L,c+1,m-1,n.getBlockedCells())&&(v=d.getPipeXSideCenter(a.getLanePipes()[m],l,y),C=new t(v,a.getLanePipes()[m]),A=new P(g,i.getPipe(),null,s.segmentType().IN_PIPE,i,C),g.addSegmentAt(1,A),a.getLanePipes()[m].addSegment(A),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),null,s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLevels()[E.getLevelNumber()].addExtendedSegment(h),I=!0):y===s.flow().HORIZONTAL&&m>c&&d.isSourceMatchingSide(g,s.nodeSide().LEFT)&&d.isTargetMatchingSide(g,s.nodeSide().RIGHT)&&d.isLaneRangeEmptyForLevel(a.getLanes(),L,c+1,m-1,n.getBlockedCells())&&d.isLaneRangeEmptyForLevel(a.getLanes(),T,c+1,m-1,n.getBlockedCells())&&(v=d.getPipeXSideCenter(a.getLanePipes()[c+1],l,y),C=new t(v,a.getLanePipes()[c+1]),A=new P(g,i.getPipe(),null,s.segmentType().IN_PIPE,i,C),g.addSegmentAt(1,A),a.getLanePipes()[m].addSegment(A),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),null,s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLevels()[E.getLevelNumber()].addExtendedSegment(h),I=!0)),!I)){var K;if(T>L)K=L+1;else if(T<L)K=T+1;else{var z=a.getLevelPipes()[L].getSegmentsNumber(),U=a.getLevelPipes()[L+1].getSegmentsNumber();K=z<=U?L:L+1}var Y=a.getLevelPipes()[K];_=new o(Y,i.getPipe()),x=new t(_.getCenterPoint(),i.getPipe()),O=new o(Y,l.getPipe()),F=new t(O.getCenterPoint(),l.getPipe()),V=new P(g,i.getPipe(),null,s.segmentType().IN_PIPE,i,x),g.addSegment(V),i.getPipe().addSegment(V),B=new P(g,Y,null,s.segmentType().IN_PIPE,x,F),g.addSegment(B),Y.addSegment(B),M=new P(g,l.getPipe(),null,s.segmentType().IN_PIPE,F,l),g.addSegment(M),l.getPipe().addSegment(M)}}else if(I=!1,g.isDummyOptimization()||g.hasPipesOnly()||(d.isSourceMatchingSide(g,s.nodeSide().LEFT)&&d.isTargetMatchingSide(g,s.nodeSide().FRONT)&&L>T&&(y===s.flow().VERTICAL?m<c:m>c)?(D=y===s.flow().VERTICAL?m+1:c,k=y===s.flow().VERTICAL?c:m-1,d.isLaneRangeEmptyForLevel(a.getLanes(),L,D,k,n.getBlockedCells())&&d.isLevelRangeEmptyForLane(a.getLevels(),c,T+1,L,n.getBlockedCells())&&(v=y===s.flow().VERTICAL?new e(l.x,i.y):new e(i.x,l.y),C=new e(v.x,v.y),N=new t(g.getSourcePort().getAttachmentPoint(),i.getPipe()),f=new P(g,i.getPipe(),a.getLevels()[L],s.segmentType().NODE_TO_PIPE,N,C),g.replaceStartSegment(f),a.getLevels()[L].addExtendedSegment(f),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),a.getLanes()[c],s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLanes()[c].addExtendedSegment(h),I=!0)):d.isSourceMatchingSide(g,s.nodeSide().FRONT)&&d.isTargetMatchingSide(g,s.nodeSide().LEFT)&&L<T&&(y===s.flow().VERTICAL?m>c:m<c)?(D=y===s.flow().VERTICAL?c+1:m,k=y===s.flow().VERTICAL?m:c-1,d.isLaneRangeEmptyForLevel(a.getLanes(),T,D,k,n.getBlockedCells())&&d.isLevelRangeEmptyForLane(a.getLevels(),m,L+1,T,n.getBlockedCells())&&(v=y===s.flow().VERTICAL?new e(i.x,l.y):new e(l.x,i.y),C=new e(v.x,v.y),N=new t(g.getSourcePort().getAttachmentPoint(),i.getPipe()),f=new P(g,i.getPipe(),a.getLanes()[m],s.segmentType().NODE_TO_PIPE,N,C),g.replaceStartSegment(f),a.getLanes()[m].addExtendedSegment(f),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),a.getLevels()[T],s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLevels()[T].addExtendedSegment(h),I=!0)):d.isSourceMatchingSide(g,s.nodeSide().RIGHT)&&d.isTargetMatchingSide(g,s.nodeSide().FRONT)&&L>T&&(y===s.flow().VERTICAL?m>c:m<c)?(D=y===s.flow().VERTICAL?c:m+1,k=y===s.flow().VERTICAL?m-1:c,d.isLaneRangeEmptyForLevel(a.getLanes(),L,D,k,n.getBlockedCells())&&d.isLevelRangeEmptyForLane(a.getLevels(),c,T+1,L,n.getBlockedCells())&&(v=y===s.flow().VERTICAL?new e(l.x,i.y):new e(i.x,l.y),C=new e(v.x,v.y),N=new t(g.getSourcePort().getAttachmentPoint(),i.getPipe()),f=new P(g,i.getPipe(),a.getLevels()[L],s.segmentType().NODE_TO_PIPE,N,C),g.replaceStartSegment(f),a.getLevels()[L].addExtendedSegment(f),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),a.getLanes()[c],s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLanes()[c].addExtendedSegment(h),I=!0)):d.isSourceMatchingSide(g,s.nodeSide().FRONT)&&d.isTargetMatchingSide(g,s.nodeSide().RIGHT)&&L<T&&(y===s.flow().VERTICAL?m<c:m>c)?(D=y===s.flow().VERTICAL?m:c+1,k=y===s.flow().VERTICAL?c-1:m,d.isLaneRangeEmptyForLevel(a.getLanes(),T,D,k,n.getBlockedCells())&&d.isLevelRangeEmptyForLane(a.getLevels(),m,L+1,T,n.getBlockedCells())&&(v=y===s.flow().VERTICAL?new e(i.x,l.y):new e(l.x,i.y),C=new e(v.x,v.y),N=new t(g.getSourcePort().getAttachmentPoint(),i.getPipe()),f=new P(g,i.getPipe(),a.getLanes()[m],s.segmentType().NODE_TO_PIPE,N,C),g.replaceStartSegment(f),a.getLanes()[m].addExtendedSegment(f),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),a.getLevels()[T],s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLevels()[T].addExtendedSegment(h),I=!0)):d.isSourceMatchingSide(g,s.nodeSide().LEFT)&&d.isTargetMatchingSide(g,s.nodeSide().BACK)&&L<T&&(y===s.flow().VERTICAL?m<c:m>c)?(D=y===s.flow().VERTICAL?m+1:c,k=y===s.flow().VERTICAL?c:m-1,d.isLaneRangeEmptyForLevel(a.getLanes(),L,D,k,n.getBlockedCells())&&d.isLevelRangeEmptyForLane(a.getLevels(),c,T-1,L,n.getBlockedCells())&&(v=y===s.flow().VERTICAL?new e(l.x,i.y):new e(i.x,l.y),C=new e(v.x,v.y),N=new t(g.getSourcePort().getAttachmentPoint(),i.getPipe()),f=new P(g,i.getPipe(),a.getLevels()[L],s.segmentType().NODE_TO_PIPE,N,C),g.replaceStartSegment(f),a.getLevels()[L].addExtendedSegment(f),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),a.getLanes()[c],s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLanes()[c].addExtendedSegment(h),I=!0)):d.isSourceMatchingSide(g,s.nodeSide().BACK)&&d.isTargetMatchingSide(g,s.nodeSide().LEFT)&&L>T&&(y===s.flow().VERTICAL?m>c:m<c)?(D=y===s.flow().VERTICAL?c+1:m,k=y===s.flow().VERTICAL?m:c-1,d.isLaneRangeEmptyForLevel(a.getLanes(),T,D,k,n.getBlockedCells())&&d.isLevelRangeEmptyForLane(a.getLevels(),m,T,L-1,n.getBlockedCells())&&(v=y===s.flow().VERTICAL?new e(i.x,l.y):new e(l.x,i.y),C=new e(v.x,v.y),N=new t(g.getSourcePort().getAttachmentPoint(),i.getPipe()),f=new P(g,i.getPipe(),a.getLanes()[m],s.segmentType().NODE_TO_PIPE,N,C),g.replaceStartSegment(f),a.getLanes()[m].addExtendedSegment(f),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),a.getLevels()[T],s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLevels()[T].addExtendedSegment(h),I=!0)):d.isSourceMatchingSide(g,s.nodeSide().RIGHT)&&d.isTargetMatchingSide(g,s.nodeSide().BACK)&&L<T&&(y===s.flow().VERTICAL?m>c:m<c)?(D=y===s.flow().VERTICAL?c:m+1,k=y==s.flow().VERTICAL?m-1:c,d.isLaneRangeEmptyForLevel(a.getLanes(),L,D,k,n.getBlockedCells())&&d.isLevelRangeEmptyForLane(a.getLevels(),c,L,T-1,n.getBlockedCells())&&(v=y===s.flow().VERTICAL?new e(l.x,i.y):new e(i.x,l.y),C=new e(v.x,v.y),N=new t(g.getSourcePort().getAttachmentPoint(),i.getPipe()),f=new P(g,i.getPipe(),a.getLevels()[L],s.segmentType().NODE_TO_PIPE,N,C),g.replaceStartSegment(f),a.getLevels()[L].addExtendedSegment(f),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),a.getLanes()[c],s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLanes()[c].addExtendedSegment(h),I=!0)):d.isSourceMatchingSide(g,s.nodeSide().BACK)&&d.isTargetMatchingSide(g,s.nodeSide().RIGHT)&&L>T&&(y===s.flow().VERTICAL?m<c:m>c)&&(D=y===s.flow().VERTICAL?m:c+1,k=y===s.flow().VERTICAL?c-1:m,d.isLaneRangeEmptyForLevel(a.getLanes(),T,D,k,n.getBlockedCells())&&d.isLevelRangeEmptyForLane(a.getLevels(),m,L+1,T,n.getBlockedCells())&&(v=y===s.flow().VERTICAL?new e(i.x,l.y):new e(l.x,i.y),C=new e(v.x,v.y),N=new t(g.getSourcePort().getAttachmentPoint(),i.getPipe()),f=new P(g,i.getPipe(),a.getLanes()[m],s.segmentType().NODE_TO_PIPE,N,C),g.replaceStartSegment(f),a.getLanes()[m].addExtendedSegment(f),R=new t(g.getTargetPort().getAttachmentPoint(),l.getPipe()),h=new P(g,l.getPipe(),a.getLevels()[T],s.segmentType().PIPE_TO_NODE,C,R),g.replaceEndSegment(h),a.getLevels()[T].addExtendedSegment(h),I=!0))),!I){var Z;Z=i.getPipe().getType()===s.pipeType().LEVEL_PIPE?new o(i.getPipe(),l.getPipe()):new o(l.getPipe(),i.getPipe());var q=new e(Z.getCenterPoint().x,Z.getCenterPoint().y),j=new P(g,i.getPipe(),null,s.segmentType().IN_PIPE,i,q);g.addSegment(j),i.getPipe().addSegment(j);var J=new P(g,l.getPipe(),null,s.segmentType().IN_PIPE,q,l);g.addSegment(J),l.getPipe().addSegment(J)}}}var i=this,a=n;i.traceEdge=function(e){var n=p.getFlowDirection();if(!e.getSourcePort().getNode().isAllocated()||!e.getTargetPort().getNode().isAllocated())return void console.log("[traceEdge]: Unallocated nodes, edge skipped: "+e.toString());if(!e.getSourcePort())return void console.log("[traceEdge]: source node undefined for edge "+e.getName());var i=e.getSourcePort().getNode(),l=i.getLevelNumber(),o=i.getLaneNumber(),r=e.getSourcePort().getSide();if(r===s.nodeSide().ANY)return void console.log("[traceEdge]: source side undefined for edge "+e.getName());if(!e.getTargetPort())return void console.log("[traceEdge]: target node undefined for edge "+e.getName());var L=e.getTargetPort().getNode(),m=L.getLevelNumber(),S=L.getLaneNumber(),E=e.getTargetPort().getSide();if(E===s.nodeSide().ANY)return void console.log("[traceEdge]: target side undefined for edge "+e.getName());var T;d.isMatchingSide(r,s.nodeSide().FRONT)?T=a.getLevelPipes()[l+1]:d.isMatchingSide(r,s.nodeSide().BACK)&&(T=a.getLevelPipes()[l]);var c;if(d.isMatchingSide(r,s.nodeSide().LEFT)?c=n===s.flow().VERTICAL?a.getLanePipes()[o+1]:a.getLanePipes()[o]:d.isMatchingSide(r,s.nodeSide().RIGHT)&&(c=n===s.flow().VERTICAL?a.getLanePipes()[o]:a.getLanePipes()[o+1]),!T&&!c)return void console.log("[traceEdge]: no source pipe found");var w=T||c,y=d.getPipeXSideCenter(w,e.getSourcePort().getAttachmentPoint(),n),u=new t(e.getSourcePort().getAttachmentPoint(),w),I=new t(y,w),v=new P(e,w,null,s.segmentType().NODE_TO_PIPE,u,I);e.addSegment(v);var C;d.isMatchingSide(E,s.nodeSide().FRONT)?C=a.getLevelPipes()[m+1]:d.isMatchingSide(E,s.nodeSide().BACK)&&(C=a.getLevelPipes()[m]);var A;if(d.isMatchingSide(E,s.nodeSide().LEFT)?A=n===s.flow().VERTICAL?a.getLanePipes()[S+1]:a.getLanePipes()[S]:d.isMatchingSide(E,s.nodeSide().RIGHT)&&(A=n===s.flow().VERTICAL?a.getLanePipes()[S]:a.getLanePipes()[S+1]),!C&&!A)return void console.log("[traceEdge] no target pipe found");var N=C||A,R=d.getPipeXSideCenter(N,e.getTargetPort().getAttachmentPoint(),n),f=new t(R,N),h=new t(e.getTargetPort().getAttachmentPoint(),N),_=new P(e,N,null,s.segmentType().PIPE_TO_NODE,f,h);e.addSegment(_),g(e,I,f)}}return r});